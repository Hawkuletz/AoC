#!/bin/bash
# 7digit displays!

uarr=()
sarr=()

segstxtarr=()
outtxtarr=()
digits=()

segsarr=() # experimental


chk39()
{
	declare -A a
	local x=''
	local sf=0
	for (( i=0 ; i<5 ; i++ )) ; do
		s=${d3:$i:1}
		a[$s]=1
	done
	for (( i=0 ; i<6 ; i++ )) ; do
		x=${crt:$i:1}
		if [[ ${a[$x]} == 1 ]] ; then
			(( sf++ ))
		fi
	done
	return  $(( sf!=5 ))
}

sortseg()
{
	declare -A a
	local i
	srt=''
	local l=${#crt}
	for (( i=0 ; i<l ; i++ )) ; do
		s=${crt:$i:1}
		a[$s]=1
	done
	for i in a b c d e f g ; do
		if [[ ${a[$i]} == 1 ]] ; then
			srt+=$i
		fi
	done
}


# process segment line
procsegln()
{
	local i=0
	local l=0
	segsarr=()
	for crt in $crtsegln ; do
		sortseg
		crt=$srt
		l=${#crt}
		case $l in
			'2')
				d1=$crt;;
			'3')
				d7=$crt;;
			'4')
				d4=$crt;;
			'7')
				d8=$crt;;
			*)
				segsarr[i++]=$crt;;
		esac
	done


	# one's segments
	d10=${d1:0:1}
	d11=${d1:1:1}

	# search for 3 and 6 in segsarr (and remove from segsarr; but can't use unset, so just set them to '')
	i=0
	for crt in "${segsarr[@]}" ; do
		l=${#crt}
		if [[ $l == 5 && $crt == *"$d10"* && $crt == *"$d11"* ]] ; then
			d3=$crt
			segsarr[$i]=''
		fi

		# test has strange syntax, it's easier with 2 ifs
		# we are looking for a 6 segment digit that is missing one segment that is present in 1
		if [[ $l == 6 ]] ; then
			if ! [[ $crt == *"$d10"* && $crt == *"$d11"* ]] ; then
				d6=$crt
				# at this point we can identify top/bottom segments for 1
				if [[ $crt == *"$d10"* ]] ; then
					d1top=$d11
				else
					d1top=$d10
				fi
				segsarr[$i]=''
			fi
		fi
		(( i++ ))
	done

	# we now have 1,3,4,6,7,8 (2,5,9,0 are missing)
	# one more pass
	i=0
	for crt in "${segsarr[@]}" ; do
		l=${#crt}
		if [[ $l == 5 ]] ; then
			if [[ $crt == *"$d1top"* ]] ; then
				d2=$crt
			else
				d5=$crt
			fi
		fi
		if [[ $l == 6 ]] ; then
			if chk39 ; then
				d9=$crt
			else
				d0=$crt
			fi
		fi
	done

	# we now have d0 -> d9 defined with active segments for each digit
	declare -A seg2val
	echo "0 - $d0"
	echo "1 - $d1"
	echo "2 - $d2"
	echo "3 - $d3"
	echo "4 - $d4"
	echo "5 - $d5"
	echo "6 - $d6"
	echo "7 - $d7"
	echo "8 - $d8"
	echo "9 - $d9"

	seg2val[$d0]=0
	seg2val[$d1]=1
	seg2val[$d2]=2
	seg2val[$d3]=3
	seg2val[$d4]=4
	seg2val[$d5]=5
	seg2val[$d6]=6
	seg2val[$d7]=7
	seg2val[$d8]=8
	seg2val[$d9]=9
}


i=0
while IFS= read -r ln; do
	lnarr[i++]=$ln
done

lcnt=${#lnarr[@]}

for (( i=0 ; i<lcnt ; i++ )) ; do
	crtsegln="${lnarr[i]%%|*}"
	crtsegln="${crtsegln% *}"
	procsegln
#	echo "seg[$i]=$crtsegln|"
done


