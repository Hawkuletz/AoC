#!/bin/bash
# Smoke basin

# we always need 3 arrays
lnarr=()
minsarr=()
minsax=()
minsay=()
l3arr=(0 0 0)
minscnt=0
fillstack=()
fillcnt=0
risk=0
prv=''
crt=''
nxt=''
ll=0
atfirst=1
atlast=0
ypos=0

# load $1 into arr, char by char (I don't know how to process each char otherwise)
str2arr()
{
	local l=${#1}
	arr=()
	for (( i=0 ; i<l ; i++ )) ; do
		arr[$i]=${1:i:1}
	done
}

# geth x y, where y is index into lnarr, x is char in line; char must be a single digit; both are 0-based
geth()
{
	local ln=${lnarr[$2]}
	local v=${ln:$1:1}
	return $(( $v ))
}

# similar to geth but modifies data in lnarr
# seth x y h
seth()
{
	local x=$1
	local y=$2
	local h=$3
	local ln=${lnarr[y]}
	local lb=${ln:0:x}
	local le=${ln:x+1}
	ln="$lb$h$le"
	lnarr[y]=$ln
}

# chkaddmin check if digit at x,y is local minimum; if it is, append it to minsarr
# assume crtln contains line at y (minor optimisation)
chkaddmin()
{
	local h=${crtln:x:1}
	local t=0
	# horizontal check
	if (( x>0 )) ; then
		t=${crtln:x-1:1}
		if (( h>=t )) ; then return 1 ; fi
	fi
	if (( x<ll-1 )) ; then
		t=${crtln:x+1:1}
		if (( h>=t )) ; then return 1 ; fi
	fi
	# vertical check
	if (( y>0 )) ; then
		geth $x $(( y-1 ))
		if (( h>=$? )) ; then return 1 ; fi
	fi
	if (( y<lcnt-1 )) ; then
		geth $x $(( y+1 ))
		if (( h>=$? )) ; then return 1 ; fi
	fi
	minsatx[minscnt]=$x
	minsaty[minscnt]=$y
	minsarr[minscnt++]=$h
	echo "min $h at $x,$y"
	(( risk+=h+1 ))
	return 0
}

# fill up to 9s, starting at x y
floodfill()
{
	local x=$1
	local y=$2
#	echo "x=$x y=$y"
	if (( x<0 || x>=ll || y<0 || y>=lcnt )) ; then return; fi
	geth $x $y
	if (( $?==9 )) ; then return; fi
	seth $1 $2 9
	(( fillcnt++ ))
	floodfill $((x-1)) $y
	floodfill $((x+1)) $y
	floodfill $x $((y-1))
	floodfill $x $((y+1))
}

chklarge()
{
	local i
	local imin=0
	local mval=l3arr[0]
	for (( i=1 ; i<3 ; i++ )) ; do
		if (( l3arr[i]<mval )) ; then
			imin=$i
			mval=${l3arr[i]}
		fi
	done
	if (( fillcnt > mval )) ; then
		l3arr[imin]=$fillcnt
	fi
}


i=0
while IFS= read -r ln; do
	lnarr[i++]="$ln"
done
lcnt=${#lnarr[@]}
# assume all lines have the same length, get width (line length) from first line
ll=${#lnarr[0]}

for (( y=0 ; y<lcnt ; y++ )) ; do
	crtln=${lnarr[y]}
	for (( x=0 ; x<ll ; x++ )) ; do
		chkaddmin
	done
done

for (( i=0 ; i<minscnt ; i++ )) ; do
	fillcnt=0
	floodfill ${minsatx[i]} ${minsaty[i]}
	echo "Fillcnt=$fillcnt"
	chklarge
done


rv=$(( l3arr[0]*l3arr[1]*l3arr[2] ))
echo "product of 3 largest is $rv"

